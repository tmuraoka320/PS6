@
After grouping electoral systems in each country, we have 36 observations.
options(continue=" ")
for(i in 2:dim(house_group)[2]){
print(colnames(house_group)[i])
print(table(house_group[,i]))
}
@
<<fig=TRUE>>=
library(stats)
house_dist <- dist(house_group[,c(2,3,4,9,10)]) # measure distance
house_clust <- hclust(house_dist, method="complete") # clustering
house_clust$labels <- house_group[,1]
presid_group <- data.frame(NULL)
for(i in unique(presid$country)){
sub <- presid[presid$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
presid_group <- rbind(presid_group, newrow)
}
}
dim(presid_group)[1]
@
After grouping electoral systems in each country, we have 28 observations. Below, we check which variables vary across systems and find that the presidential electoral systems vary only in electoral rule, tier 1 formula, and legal threshold.
options(continue=" ")
for(i in 2:dim(presid_group)[2]){
print(colnames(presid_group)[i])
print(table(presid_group[,i]))
}
# column 2 (elecrule), 3 (tier1_formula), and 9 (legal_threshold) have
# variations
# some tables that check how many combinations we have
table(presid_group[,2], presid_group[,3])
table(presid_group[,2], presid_group[,9])
table(presid_group[,3], presid_group[,9])
table(presid_group[,9], presid_group[,2], presid_group[,3])
@
We use the three aspects of the presidential electoral systems (i.e. electoral rule, tier 1 formula, and legal threshold) to cluster them. We use hierarchical clustering with complete method.
<<fig=TRUE>>=
library(stats)
presid_dist <- dist(presid_group[,c(2,3,9)]) # measure distance
presid_clust <- hclust(presid_dist, method="complete") # clustering
presid_clust$labels <- presid_group[,1]
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
dim(senate_group)[1]
@
After grouping electoral systems in each country, we have 17 observations.
options(continue=" ")
for(i in 2:dim(senate_group)[2]){
print(colnames(senate_group)[i])
print(table(senate_group[,i]))
}
@
<<fig=TRUE>>=
library(stats)
senate_dist <- dist(senate_group[,c(2,3,4,9,10)]) # measure distance
senate_clust <- hclust(senate_dist, method="complete") # clustering
senate_clust$labels <- senate_group[,1]
par(mfrow=c(2,2))
plot(house_clust,
main="Hierarchical Clustering of Lower House Electoral Systems")
plot(presid_clust,
main="Hierarchical Clustering of Presidential Electoral Systems")
plot(senate_clust,
main="Hierarchical Clustering of Upper House Electoral Systems")
df <- read.csv("C:/Users/Taishi/Desktop/WTF_stacked_csv.csv", na.string=".",
stringsAsFactors=FALSE)
# subset by lower house election, presidential election, and upper house election
house <- df[df$presidential==0&df$upper==0,]
presid <- df[df$presidential==1,]
senate <- df[df$upper==1,]
presid_group <- data.frame(NULL)
for(i in unique(presid$country)){
sub <- presid[presid$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
presid_group <- rbind(presid_group, newrow)
}
}
presid_dist <- dist(presid_group[,c(2,3)])
presid_clust <- hclust(presid_dist, method="complete") # clustering
presid_clust$labels <- presid_group[,1]
plot(presid_clust,
main="Hierarchical Clustering of Presidential Electoral Systems")
View(senate)
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
dim(senate_group)[1]
@
After grouping electoral systems in each country, we have 17 observations.
options(continue=" ")
for(i in 2:dim(senate_group)[2]){
print(colnames(senate_group)[i])
print(table(senate_group[,i]))
}
@
<<fig=TRUE>>=
library(stats)
senate_dist <- dist(senate_group[,c(2,3,4,9,10)]) # measure distance
senate_clust <- hclust(senate_dist, method="complete") # clustering
senate_clust$labels <- senate_group[,1]
plot(senate_clust,
main="Hierarchical Clustering of Upper House Electoral Systems")
senate_dist <- dist(senate_group[,c(2,3)]) # measure distance
senate_clust <- hclust(senate_dist, method="complete") # clustering
senate_clust$labels <- senate_group[,1]
plot(senate_clust,
main="Hierarchical Clustering of Upper House Electoral Systems")
senate_dist <- dist(senate_group[,c(2,3)])
senate_clust <- hclust(senate_dist, method="complete") # clustering
senate_dist <- dist(senate_group[,c(2,3,4)])
senate_clust <- hclust(senate_dist, method="complete") # clustering
senate_dist <- dist(senate_group[,c(2,3,4,9,10)]) # measure distance
senate_clust <- hclust(senate_dist, method="complete") # clustering
senate_clust$labels <- senate_group[,1]
plot(senate_clust,
main="Hierarchical Clustering of Upper House Electoral Systems")
senate_dist <- dist(senate_group[,c(2,10)]) # measure distance
senate_clust <- hclust(senate_dist, method="complete") # clustering
senate_clust$labels <- senate_group[,1]
plot(senate_clust,
main="Hierarchical Clustering of Upper House Electoral Systems")
senate_dist <- dist(senate_group[,c(2,10)])
senate_clust <- hclust(senate_dist, method="complete") # clustering
senate_clust$labels <- senate_group[,1]
plot(senate_clust,
main="Hierarchical Clustering of Upper House Electoral Systems")
@
as.vector(cutree(senate_clust, k=8))
table(as.vector(cutree(senate_clust, k=8)))
table(as.vector(cutree(senate_clust, k=4)))
table(as.vector(cutree(senate_clust, k=6)))
senate_dist <- dist(senate_group[,c(2,3)])
senate_clust <- hclust(senate_dist, method="complete") # clustering
help(hclust)
senate_clust <- hclust(senate_dist, method="average") # clustering
senate_clust <- hclust(senate_dist, method="single") # clustering
senate_clust <- hclust(senate_dist, method="median") # clustering
table(senate_group$elecrule, senate_group$tier1_formula)
senate_dist <- dist(senate_group[,c(3,10)])
senate_clust <- hclust(senate_dist, method="complete") # clustering
df <- read.csv("C:/Users/Taishi/Desktop/WTF_stacked_csv.csv", na.string=".",
stringsAsFactors=FALSE)
# subset by lower house election, presidential election, and upper house election
house <- df[df$presidential==0&df$upper==0,]
presid <- df[df$presidential==1,]
senate <- df[df$upper==1,]
presid_group <- data.frame(NULL)
for(i in unique(presid$country)){
sub <- presid[presid$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
presid_group <- rbind(presid_group, newrow)
}
}
dim(presid_group)[1]
table(presid_group[,2], presid_group[,3])
setClass(Class="Squares",
representation = representation(
square = "numeric",
x = "numeric",
y = "numeric"
),
prototype = prototype(
square = c(),
x = c(),
y = c()
)
)
#' @export
setMethod("initialize", "Squares",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @rdname Squares
#' @export
setGeneric("getSquares",
function(object="Squares")  {
standardGeneric("getSquares")
}
)
#' @export
setMethod("getSquares", "Squares",
function(object){
return(object@square)
}
)
setGeneric(name="addSquares",
def=function(x, y, ...)
{standardGeneric("addSquares")}
)
#' @export
setMethod(f="addSquares",
definition=function(x, y, ...){
return(new("Squares", square=(x^2 + y^2), x = x, y = y))
}
)
setGeneric(name="subtractSquares",
def=function(x, y, ...)
{standardGeneric("subtractSquares")}
)
#' @export
setMethod(f="subtractSquares",
definition=function(x, y, ...){
return(new("Squares", square=(x^2 - y^2), x = x, y = y))
}
)
setClass(Class="AllSquares",
contains="Squares",
representation = representation(
addSquare = "numeric",
subtractSquare = "numeric"
),
prototype = prototype(
addSquare = numeric(),
subtractSquare=numeric(),
x = numeric(),
y = numeric(),
square=numeric()
)
)
#' @export
setMethod("initialize", "AllSquares",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @export
setMethod("getSquares", "AllSquares",
function(object){
out <- cbind(object@addSquare, object@subtractSquare)
colnames(out) <- c("Added", "Subtracted")
return(out)
}
)
##
setAs(from="Squares", to="AllSquares",
def=function(from){
new("AllSquares",
x=from@x,
y=from@y,
square=from@square
)
}
)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
help(createCandidate)
createCandidate("obama", 333, "Republican") # this works
setClass(Class="Candidate",
representation=representation(
name="character",
delegatesWon="numeric",
party="character",
delegatesNeeded="numeric"),
prototype = prototype(
name=c(),
delegatesWon=c(),
party=c(),
delegatesNeeded=c()))
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
help(createCandidate)
createCandidate("obama", 333, "Republican") # this works
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
createCandidate("obama", 333, "Republican") # this works
createCandidate
getMethod(createCandidate)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
createCandidate("obama", 333, "Republican") # this works
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
createCandidate("obama", 333, "Republican") # this works
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
createCandidate("obama", 333, "Republican") # this works
setMethod("createCandidate",
definition=function(name, delegatesWon, party){
if(party!="Democratic" & party!="Republican"){
stop("party should be Democratic or Republican!")
}
else{
if(party=="Democratic"){
if(delegatesWon < 0 | delegatesWon > 4765){
print("delegatesWon should be larger than 0 and smaller than 4765
for a Democratic candidate!")
}
else{
delNeed <- 2383
}
}
else{
if(delegatesWon < 0 | delegatesWon > 2472){
print("delegatesWon should be larger than 0 and smaller than 2472 for
a Republican candidate!")
}
else{
delNeed <- 1237
}
}
}
object <- new("Candidate",
name=name,
delegatesWon=delegatesWon,
party=party,
delegatesNeeded=delNeed)
return(object)
})
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
help(createCandidate)
createCandidate("obama", 333, "Republican") # this works
createCandidate(1, 333, "Republican") # error because name should not be a number
createCandidate("obama", -200, "Republican") # error because the number is strange
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
createCandidate("obama", -200, "Republican") # error because the number is strange
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
createCandidate("obama", 333, "Republican") # this works
createCandidate(1, 333, "Republican") # error because name should not be a number
createCandidate("obama", -200, "Republican") # error because the number is strange
createCandidate("obama", 333, "Whig") # error because party should be Democratic or
help(createCandidate)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
help(createCandidate)
createCandidate("obama", 333, "Republican") # this works
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
help(createCandidate)
createCandidate("obama", 333, "Republican") # this works
createCandidate(1, 333, "Republican") # error because name should not be a number
createCandidate("obama", -200, "Republican") # error because the number is strange
createCandidate("obama", 333, "Whig") # error because party should be Democratic or
createCandidate("obama", "aaa", "Republican") # this works
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
library(devtools);library(roxygen2)
setwd("C:/Users/Taishi/Documents/PS6")
current.code <- as.package("PS6Package")
load_all(current.code)
document(current.code)
